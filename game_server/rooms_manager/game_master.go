package rooms_manager

import (
	"encoding/json"
	"github.com/go-park-mail-ru/2018_2_42/game_server/types"
	"github.com/pkg/errors"
	"strconv"
)

func (r *Room) GameMaster() {
	//TODO —Å–ª—É—à–∞—Ç—å UploadMap –∏ attemptGoToCell.
	return
}

// –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É
func (r *Room) UploadMap(role RoleId, message json.RawMessage) (err error) {
	var uploadedMap types.UploadMap
	err = json.Unmarshal(message, &uploadedMap)
	if err != nil {
		err = errors.Wrap(err, "in json.Unmarshal message into types.UploadMap: ")
		return
	}
	if role == 0 {
		if !r.User0UploadedCharacters {
			// uploadedMap.Weapons –¥–ª—è –∫–ª–µ—Ç–æ–∫ 13 12 11 10 9 8 7 6 5 4 3 2 1 0
			var numberOfFlags int
			for i := 0; i <= 13; i++ {
				j := 13 - i
				var weapon *Weapon
				weapon, err = NewWeapon(uploadedMap.Weapons[i])
				if err != nil {
					err = errors.Wrap(err, "in NewWeapon: ")
					return
				}
				if *weapon == "flag" {
					numberOfFlags++
				}
				r.Map[j] = &–°haracter{
					Role:   0,
					Weapon: *weapon,
				}
			}
			if numberOfFlags != 0 {
				err = errors.New("map must contain exactly one flag, but " +
					strconv.Itoa(numberOfFlags) + "found")
				return
			}
			r.User0UploadedCharacters = true
		} else {
			err = errors.New("characters already loaded")
			return
		}
	} else {
		if !r.User1UploadedCharacters {
			// 28 29 30 31 32 33 34 35 36 37 38 39 40 41
			var numberOfFlags int
			for i := 0; i <= 13; i++ {
				j := 28 + i
				var weapon *Weapon
				weapon, err = NewWeapon(uploadedMap.Weapons[i])
				if err != nil {
					err = errors.Wrap(err, "in NewWeapon: ")
					return
				}
				if *weapon == "flag" {
					numberOfFlags++
				}
				r.Map[j] = &–°haracter{
					Role:   0,
					Weapon: *weapon,
				}
			}
			if numberOfFlags != 0 {
				err = errors.New("map must contain exactly one flag, but " +
					strconv.Itoa(int(numberOfFlags)) + "found")
				return
			}
			r.User1UploadedCharacters = true
		} else {
			err = errors.New("characters already loaded")
			return
		}
	}
	if r.User0UploadedCharacters && r.User1UploadedCharacters {
		// –û—Ç—Å—ã–ª–∞–µ—Ç –∫–∞—Ä—Ç—É
		r.DownloadMap(0)
		r.DownloadMap(1)
		// –û—Ç—Å—ã–ª–∞–µ—Ç –ª–æ–≥–∏–Ω —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
		r.YourRival(0)
		r.YourRival(1)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–π —Ö–æ–¥
		r.YourTurn(0)
		r.YourTurn(1)
	}
	return
}

// –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç, –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∫–∞—Ä—Ç—É.
func (r *Room) DownloadMap(role RoleId) {
	// –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
	if role == 0 {
		downloadMap := types.DownloadMap{}
		for i := 0; i <= 41; i++ {
			j := 41 - i
			if r.Map[j] == nil {
				continue
			}
			var cell = &types.MapCell{}
			// –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤—Å–µ–≥–¥–∞ —Å–∏–Ω–∏–µ.
			if r.Map[j].Role == role {
				cell.Color = "blue"
			} else {
				cell.Color = "red"
			}
			// –æ—Ä—É–∂–∏–µ –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–∫–∞–∑–∞–ª –æ—Ä—É–∂–∏–µ.
			if r.Map[j].Role == role || r.Map[j].ShowedWeapon {
				weapon := string(r.Map[j].Weapon)
				cell.Weapon = &weapon
			}
			downloadMap[j] = cell
		}
		parameter, _ := json.Marshal(downloadMap)
		response, _ := json.Marshal(types.Event{
			Method:    "download_map",
			Parameter: parameter,
		})
		r.User0To <- response
	} else {
		downloadMap := types.DownloadMap{}
		for i := 0; i <= 41; i++ {
			if r.Map[i] == nil {
				continue
			}
			var cell = &types.MapCell{}
			// –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤—Å–µ–≥–¥–∞ —Å–∏–Ω–∏–µ.
			if r.Map[i].Role == role {
				cell.Color = "blue"
			} else {
				cell.Color = "red"
			}
			// –æ—Ä—É–∂–∏–µ –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–∫–∞–∑–∞–ª –æ—Ä—É–∂–∏–µ.
			if r.Map[i].Role == role || r.Map[i].ShowedWeapon {
				weapon := string(r.Map[i].Weapon)
				cell.Weapon = &weapon
			}
			downloadMap[i] = cell
		}
		parameter, _ := json.Marshal(downloadMap)
		response, _ := json.Marshal(types.Event{
			Method:    "download_map",
			Parameter: parameter,
		})
		r.User1To <- response
	}
	return
}

// –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∫–∞—Ä—Ç—É.
func (r *Room) YourRival(role RoleId) {
	if role == 0 {
		response := types.YourRival(r.User1.Login)
		response, _ = json.Marshal(types.Event{
			Method:    "your_rival",
			Parameter: []byte(response),
		})
		r.User1To <- response
	} else {
		response := types.YourRival(r.User0.Login)
		response, _ = json.Marshal(types.Event{
			Method:    "your_rival",
			Parameter: []byte(response),
		})
		r.User0To <- response
	}
	return
}

// –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç —á–µ–π —Ö–æ–¥, –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∫–∞—Ä—Ç—É.
func (r *Room) YourTurn(role RoleId) {
	var response []byte
	if types.YourTurn(r.UserTurnNumber == role) {
		response = []byte("true")
	} else {
		response = []byte("false")
	}
	response, _ = json.Marshal(types.Event{
		Method:    "your_turn",
		Parameter: response,
	})
	if role == 0 {
		r.User0To <- response
	} else {
		r.User1To <- response
	}
	return
}

// –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å —É—á—ë—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è,
// –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –∏–≥—Ä–æ–≤–æ–π –º–µ—Ö–∞–Ω–∏–∫–µ –∫–∞—Ä—Ç—É (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–≥—Ä—É –≤ —Å–µ–±–µ üòÆ)
// –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã.
func (r *Room) attemptGoToCell(role RoleId, message json.RawMessage) (err error) {
	var attemptGoToCell types.AttemptGoToCell
	err = json.Unmarshal(message, &attemptGoToCell)
	if err != nil {
		err = errors.Wrap(err, "in json.Unmarshal message into types.attemptGoToCell: ")
		return
	}
	if r.UserTurnNumber == role {
		err = errors.New("it's not your turn now")
		return
	}
	if r.Map[attemptGoToCell.From] == nil {
		err = errors.New("there is no character at " + strconv.Itoa(attemptGoToCell.From))
		return
	}
	if r.Map[attemptGoToCell.From].Role != role {
		err = errors.New("this is not your character at " + strconv.Itoa(attemptGoToCell.From))
		return
	}
	// –¢—É—Ç —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π –∏–≥—Ä–æ–∫—É.
	// TODO: –∏–≥—Ä–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞

	return
}

// –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∫–∞—Ä—Ç—É.
// —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –∫–∞—Ä—Ç–∞ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–∞.
func (r *Room) MoveCharacter(role RoleId, from int, to int) {
	responce, _ := json.Marshal(types.MoveCharacter{
		From: from,
		To:   to,
	})
	responce, _ = json.Marshal(types.Event{
		Method:    "move_character",
		Parameter: responce,
	})
	if role == 1 {
		r.User0To <- responce
	} else {
		r.User1To <- responce
	}
	return
}

// –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∫–∞—Ä—Ç—É.
// —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –∫–∞—Ä—Ç–∞ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–∞.
func (r *Room) Attack(role RoleId, winner int, winnerWeapon Weapon, loser int, loserWeapon Weapon) {
	responce, _ := json.Marshal(types.Attack{
		Winner: types.Attacking–°haracter{
			Coordinates: winner,
			Weapon:      string(winnerWeapon),
		},
		Loser: types.Attacking–°haracter{
			Coordinates: loser,
			Weapon:      string(loserWeapon),
		},
	})
	response, _ := json.Marshal(types.Event{
		Method:    "attack",
		Parameter: responce,
	})
	if role == 0 {
		r.User0To <- response
	} else {
		r.User1To <- response
	}
	return
}

// –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∫–∞—Ä—Ç—É.
// —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –∫–∞—Ä—Ç–∞ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–∞.
func (r *Room) AddWeapon(role RoleId, coordinates int, weapon Weapon) {
	response, _ := json.Marshal(types.AddWeapon{
		Coordinates: coordinates,
		Weapon:      string(weapon),
	})
	response, _ = json.Marshal(types.Event{
		Method:    "add_weapon",
		Parameter: response,
	})
	if role == 0 {
		r.User0To <- response
	} else {
		r.User1To <- response
	}
	return
}

// –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∫–∞—Ä—Ç—É –∏ –Ω–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –∏–≥—Ä—É.
// —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –∫–∞—Ä—Ç–∞ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–∞.
func (r *Room) Gameover(role RoleId, winnerRole RoleId) {
	var gameover types.Gameover
	if role == winnerRole {
		gameover.WinnerColor = "blue"
	} else {
		gameover.WinnerColor = "red"
	}
	response, _ := json.Marshal(gameover)
	response, _ = json.Marshal(types.Event{
		Method:    "gameover",
		Parameter: response,
	})
	if role == 0 {
		r.User0To <- response
	} else {
		r.User1To <- response
	}
	return
}

// —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Å –∫–ª–∏–µ–Ω—Ç–∞.
// var availableFunctions = map[string]func(r *Room, role RoleId, message json.RawMessage) (err error){
// 	"upload_map": UploadMap,
//	"attempt_go_to_cell":
//}

// –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ—á–µ–º—É –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
// Stateful —Å–µ—Ä–≤–µ—Ä: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–º–Ω–∏—Ç—å —Ä–æ–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,
// –∫–æ–º–Ω–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
// —Ä–µ—à–µ–Ω–æ –¥–µ–ª–∞—Ç—å –≤—Å—ë –Ω–∞ —Å–æ–±—ã—Ç–∏—è—Ö - –∫–ª–∏–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è,
// —Å–µ—Ä–≤–µ—Ä –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–æ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–µ, —á—Ç–æ –±—ã –æ–Ω–∏ –ø—Ä—è–º–æ –≤—ã–∑—ã–≤–∞–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏.

// —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑ –¥–≤—É—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–ø–∏—Å—å.
// –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞.
// –ø–∞—Ä—Å–∏—Ç –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å.
// –Ω–∞—Ö–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–∑—ã–≤–∞–µ–º—É—é –∏ –∫ –Ω–µ–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã–π —Ç–∏–ø.
// —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤ —ç—Ç–æ—Ç —Ç–∏–ø –ø—Ä–∏—à–µ–¥—à–∏–µ –¥–∞–Ω–Ω—ã–µ.
