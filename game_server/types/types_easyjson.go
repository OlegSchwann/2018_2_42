// TEMPORARY AUTOGENERATED FILE: easyjson stub code to make the package
// compilable during generation.

package  types

import (
  "github.com/mailru/easyjson/jwriter"
  "github.com/mailru/easyjson/jlexer"
)

func ( Event ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Event ) UnmarshalJSON([]byte) error { return nil }
func ( Event ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Event ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Event *Event

func ( UploadMap ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* UploadMap ) UnmarshalJSON([]byte) error { return nil }
func ( UploadMap ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* UploadMap ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_UploadMap *UploadMap

func ( AttemptGoToCell ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* AttemptGoToCell ) UnmarshalJSON([]byte) error { return nil }
func ( AttemptGoToCell ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* AttemptGoToCell ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_AttemptGoToCell *AttemptGoToCell

func ( MapCell ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MapCell ) UnmarshalJSON([]byte) error { return nil }
func ( MapCell ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MapCell ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MapCell *MapCell

func ( DownloadMap ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* DownloadMap ) UnmarshalJSON([]byte) error { return nil }
func ( DownloadMap ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* DownloadMap ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_DownloadMap *DownloadMap

func ( MoveCharacter ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* MoveCharacter ) UnmarshalJSON([]byte) error { return nil }
func ( MoveCharacter ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* MoveCharacter ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_MoveCharacter *MoveCharacter

func ( AttackingСharacter ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* AttackingСharacter ) UnmarshalJSON([]byte) error { return nil }
func ( AttackingСharacter ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* AttackingСharacter ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_AttackingСharacter *AttackingСharacter

func ( Attack ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Attack ) UnmarshalJSON([]byte) error { return nil }
func ( Attack ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Attack ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Attack *Attack

func ( AddWeapon ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* AddWeapon ) UnmarshalJSON([]byte) error { return nil }
func ( AddWeapon ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* AddWeapon ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_AddWeapon *AddWeapon

func ( Gameover ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Gameover ) UnmarshalJSON([]byte) error { return nil }
func ( Gameover ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Gameover ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Gameover *Gameover

func ( ErrorMessage ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* ErrorMessage ) UnmarshalJSON([]byte) error { return nil }
func ( ErrorMessage ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* ErrorMessage ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_ErrorMessage *ErrorMessage
