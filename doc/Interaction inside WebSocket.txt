портируем игру Rock Paper Scissors in ICQ (RPS)
в Web на html5

Основная идея API: состояние хранится и на клиенте и на сервере, сервер авторитарен,
изменяет состояние на клиенте вызывая функции.


Пример игровой партии с акцентом на взаимодействия.
Пометки '|' справа от описания - период интерактивности и ожидания действий игрока,
в моменты без пометки клиент только ждёт сервер.
┌──────────────────────────────────┬──────────────────────────────────┬──────────────────────────────────┐
|           игрок 0                |            Сервер                |           игрок 1                |
|Приходит с валидной кукой
                                   |Upgrade соединения до websocket,
                                   |вставка в очередь с пометкой '0'.
                                   |
                                   |Ждёт загрузки карты от
                                   |пользователя. Ждёт 1-го игрока
                                   |для создания комнаты.
|Запрашивает у игрока конфигурацию
|синих персонажей.
|(координаты на фронте                                                |Приходит с валидной кукой.
|всегда в нижней части экрана      |Upgrade соединения до websocket,
|                                  |помечает как '1', объединяет с
|  0  1  2  3  4  5  6 red         |пользователем '0', создаёт игровую|запрашивает у пользователя
|  7  8  9 10 11 12 13             |комнату.                          |конфигурацию синих
| 14 15 16 17 18 19 20                                                |персонажей
| 21 22 23 24 25 26 27                                                |
| 28 29 30 31 32 33 34 blue <--                                       |
| 35 36 37 38 39 40 41                                                |отправляет конфигурацию
|передаётсяю positionId, число                                        |персонажей
|                                  |валидирует, отзеркаливает,
|                                  |загружает в карту
|
|отправляет                        |валидирует, не изменяет
|ставит loader                     |загружает в карту
                                   |проверяет, что оба игрока создали
                                   |команду, присылает полное состояние
                                   |обоим игрокам с учётом вращения
|принимает карту, уберает loader   |                                  |принимает карту, уберает loader
                                   |Отсылает логин соперника 0-у.
|Устанавливает ярлычок соперника.  |Отсылает логин соперника 1-у.
                                                                      |Устанавливает ярлычок соперника.
                                   |Отправляет "ваш ход" 0-у.
|Ставит синий флажок "ваш ход".    |Отправляет "ход соперника" 1-у.
|Ждёт пользователя.                                                   |Ставит красный флажок
|                                                                     |"ход соперника".
|                                                                      
|пользователь нажимает на                                               
|персонажа, появляются стрелочки
|ползователь двигает персонажа
|клиент отсылает с какой кординаты
|в какую двигается пользователь
                                   |сервер смотрит, куда перемещается
                                   |персонаж.
                                   |предположим, целевая клетка пуста
                                   |перемещает персонажа на сервере
                                   |в комнате,
                                   |отправляет действие [move] 0-у
|двигает персонажа в клетку        |отправляет действие [move] 1-у
|что в ответе сервера              |(отзеркаливая координаты)
                                                                      |двигает персонажа
                                   |отправляет "ваш ход" 1-у
|меняет флажок                     |отправляет "ход соперника" 0-у    |меняет флажок
                                                                      |ждёт пользователя
                                                                      |
                                                                      |
                                                                      |пользователь двигает персонажа
                                                                      |клиент отсылает с какой кординаты
                                                                      |в какую двигается пользователь
                                   |сервер смотрит, куда перемещается
                                   |персонаж.
                                   |предположим, в целевой клетке враг
                                   |сервер проверяет первосходство
                                   |предметов персонажей
                                   |предположим, первый победил.
                                   |отправляет действие [attak]
                                   |(кто, кого, цвет обоих,
                                   |кто проиграл) 0-у
|отрисовывает анимацию,            |отправляет действие [attak]
|убирает одного персонажа          |(кто, кого, цвет обоих,
                                   |кто проиграл) 1-у.
                                   |Отправляет обновление оружия 0-у. |отрисовывает анимацию,
                                                                      |убирает одного персонажа
|обновляет оружие персонажа
                                   |Отправляет "ваш ход" 0-у
|ставит синий флажок ваш ход       |Отправляет "ход соперника" 1-у
|ждёт пользователя                                                    |ставит красный флажок
|                                                                     |ход соперника
|
|Ползователь двигает персонажа,
|клиент отсылает откуда и куда.
                                   |Сервер смотрит, куда перемещается
                                   |персонаж. Предположим, в целевой
                                   |клетке такой же персонаж, или
                                   |координаты невалидны.
                                   |Сервер отсылает заново состояние
                                   |игровой комнаты, думая, что
                                   |произошло рассогласование.
|Сверяет/перерисовывает поле,
|оставляет флажок 'ваш ход'.
|
|
|Игрок пытается ещё раз сходить,
|клиент отсылает откуда и куда.
                                   |сервер смотрит, куда перемещается
                                   |персонаж.
                                   |предположим, в целевой клетке враг
                                   |сервер проверяет первосходство
                                   |предметов персонажей
                                   |предположим, что равные предметы
                                   |
                                   |отправляет обновление оружия врага         
                                   |0-у
                                   |/*выбор нового оружия при
                                   |  одинаковом состоянии - целый
                                   |  дополнительный экран. Потом, если
                                   |  успеем, равно как и ловушку. */
                                   |отправляет "ваш ход" 1-у
                                   |отправляет "ход соперника" 0-у    |меняет флажок
|меняет флажок                                                        |ждёт пользователя
                                                                      |
                                                                      |
                                                                      |ползователь двигает персонажа
                                                                      |клиент отсылает с какой кординаты
                                                                      |в какую двигается пользователь
                                   |сервер смотрит, куда перемещается
                                   |персонаж.
                                   |предположим, оружие врага - флаг
                                   |отсылает действие [gameover]
|Отрисовывает менюшку поражения,   |(кто победил) 0-у.
|кнопку "играть снова".            |отсылает действие [gameover]
                                   |(кто победил) 1-у.                |Отрисовывает менюшку выигрыша,
                                   |Уничтожает игровую комнату,       |кнопку ещё раз.
                                   |закрывает соединение. 
└──────────────────────────────────┴──────────────────────────────────┴──────────────────────────────────┘

Типы данных, как они передаются между сервером и клиентом.
Координаты:
    positionId number 0 <= x <= 41

Оружие "weapon"
  string "rock", "scissors", "paper", "flag"

Персонаж
  Цвет "color"
  string "red", "blue"
  Взаимодействовать игрок может только с персонажами синего цвета.

  Оружие "weapon"
  тип оружие или поле отсутствует, если неизвестно

Карта
  Массив 6*7 персонажей или null для пустой клетки.


Заметка для сервера сервере:
  персонаж {
    принадлежность [1, 2]
    оружие [камень, ножницы, бумага, флаг] // флаг как оружие, которое всегда проигрывает
    спалил ли оружие перед соперником
 }


"статус" комнаты, возвращаемый при инициализации.
содержит информацию сервера, но без оружия соперника, если он ещё не принимал участие,
и повёрнутую для нулевого игрока.

Расположение на карте:
⎡  0  1  2  3  4  5  6 ⎤ ⎞ User0
⎢  7  8  9 10 11 12 13 ⎥ ⎠ Для него переворачивается.
⎢ 14 15 16 17 18 19 20 ⎥
⎢ 21 22 23 24 25 26 27 ⎥
⎢ 28 29 30 31 32 33 34 ⎥ ⎞ User1
⎣ 35 36 37 38 39 40 41 ⎦ ⎠

for positionId := 0; positionId <= 41; positionId++ {
    user0Map[positionId] = serverMap[41 - positionId]
}

Список handler's, которые необходимо реализовать:
На сервере по http:
    Установление соединения к игре, протокол http, /game/v1/instance1
    Требует cookie sessionid.

На сервере внутри websocket:
    Первоначальная загрузка карты
    "upload_map"

    Движение персонажа
    "attempt_go_to_cell"

На клиенте внутри websocket:
    Загрузка всей карты
    "download_map"

    Загрузка описания соперника
    "your_rival"

    Установки статуса чей ход.
    "your_turn"

    Простое движение пресонажа любого игрока.
    "move_character"

    Отрисовка боя, уничтожение одного персонажа.
    "attack"

    Обновление или появление оружия у персонажа.
    "add_weapon"

    Конец игры, отображение торжествующего персонажа с флагом соперника.
    "gameover"

Стоит отметить, что всё работает на событиях. Клиент и сервер просто применяют изменения,
не должны хранить состояние (эмулировать стек вызовов) и возвращать результат.
Примеры всех запросов, эталон формата.

{
  "method": "upload_map",
  "parameter": {
    "color": "blue",
    "weapons": [
      "scissors", // 28      Расположение на карте.
      "rock",     // 29      На клиенте всегда выглядит, как у User1.
      "rock",     // 30      ⎡  0  1  2  3  4  5  6 ⎤⎞ User0
      "scissors", // 31      ⎢  7  8  9 10 11 12 13 ⎥⎠
      "paper",    // 32      ⎢ 14 15 16 17 18 19 20 ⎥
      "rock",     // 33      ⎢ 21 22 23 24 25 26 27 ⎥
      "paper",    // 34      ⎢ 28 29 30 31 32 33 34 ⎥⎞ User1
      "paper",    // 35      ⎣ 35 36 37 38 39 40 41 ⎦⎠
      "scissors", // 36
      "paper",    // 37
      "rock",     // 38
      "flag",     // 39
      "scissors", // 40
      "paper"     // 41
    ]
  }
}

{
  "method": "attempt_go_to_cell",
  "parameter": {
    "from": positionId
    "to": positionId
  }
}

{
  "method": "download_map",
  "parameter": [
    {
       "color": "red",
       "weapon": null //оружие еще не спалилось
    },
    {
       "color": "red",
       "weapon": "rock" // оружие спалилось
    },
    {
       "color": "red",
       "weapon": null
    },
    {
       "color": "red",
       "weapon": null
    },
    {
       "color": "red",
       "weapon": null
    },
    {
       "color": "red",
       "weapon": null
    },
    {
       "color": "red",
       "weapon": null
    },
    {
       "color": "red",
       "weapon": null
    },
    {
       "color": "red",
       "weapon": null
    },
    {
       "color": "red",
       "weapon": null
    },
    {
       "color": "red",
       "weapon": null
    },
    {
       "color": "red",
       "weapon": null
    },
    {
       "color": "red",
       "weapon": null
    },
    {
       "color": "red",
       "weapon": null
    },
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    {
       "color": "blue",
       "weapon": "scissors"
    },
    {
      "color": "blue",
      "weapon": "rock"
    },
    {
      "color": "blue",
      "weapon": "rock"
    },
    {
      "color": "blue",
      "weapon": "scissors"
    },
    {
      "color": "blue",
      "weapon": "paper"
    },
    {
      "color": "blue",
      "weapon": "rock"
    },
    {
      "color": "blue",
      "weapon": "paper"
    }
    null, // убит
    {
      "color": "blue",
      "weapon": "scissors"
    },
    {
      "color": "blue",
      "weapon": "paper"
    },
    {
      "color": "blue",
      "weapon": "rock"
    },
    {
      "color": "blue",
      "weapon": "flag"
    },
    {
      "color": "blue",
      "weapon": "scissors"
    },
    {
      "color": "blue",
      "weapon": "paper"
    }
  ]
}

{
  "method": "your_rival",
  "parameter": "admin"
}

{
  "method": "your_turn",
  "parameter": true
}

{
  "method": "move_character",
  "parameter": {
    "from": positionId,
    "to": positionId
  }
}

{
  "method": "attack",
  "parameter": {
    "winner": {
      "coordinates": positionId,
      "weapon": "scissors"
    },
    "loser": {
      "coordinates": positionId,
      "weapon": "paper"
    }
  }
}

{
  "method": "add_weapon",
  "parameter": {
    "coordinates": positionId,
    "weapon": "paper"
  }
}

{
  "method": "gameover",
  "parameter": {
    "winner_color": "blue"
  }
}
